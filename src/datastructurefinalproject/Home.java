/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package datastructurefinalproject;

import java.io.File;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author mohammadi
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        new Tools().setCenter(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnChoseFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnChoseFile.setText("Choose File");
        btnChoseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChoseFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(btnChoseFile)
                .addContainerGap(406, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(btnChoseFile)
                .addContainerGap(314, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public static int removeDuplicateCharacterFromArray(char array[], int n) {
        if (n == 0 || n == 1) {
            return n;
        }
        char[] temp = new char[n];
        int j = 0;
        for (int i = 0; i < n - 1; i++) {
            if (array[i] != array[i + 1]) {
                temp[j++] = array[i];
            }
        }
        temp[j++] = array[n - 1];
        
        for (int i = 0; i < j; i++) {
            array[i] = temp[i];
        }
        return j;
    }
    
    File selectedFile = null;
    private void btnChoseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChoseFileActionPerformed
        JFileChooser file = new JFileChooser();
        file.setDialogTitle("Open (*cmp,*.txt) Files");

        //----------------------------- Extension Filter -----------------------------------------------------------------------------------------------------------------
        FileNameExtensionFilter txt = new FileNameExtensionFilter("TEXT(*.txt)", "txt");
        FileNameExtensionFilter cmp = new FileNameExtensionFilter("cmp(*.cmp)", "cmp");
        
        file.setFileFilter(txt);
        file.setFileFilter(cmp);

        //------------------------- Set Default Directory --------------------------------------------------------------------------------------------------------------------------------------------
        File defaultDirectory = new File(System.getProperty("user.home") + System.getProperty("file.separator") + "Desktop");
        file.setCurrentDirectory(defaultDirectory);
        
        file.showOpenDialog(this);
        selectedFile = file.getSelectedFile();
        
        String selectedFilePath = selectedFile.getPath();
        String extention = selectedFilePath.substring(selectedFilePath.lastIndexOf("."), selectedFilePath.length());
        
        Tools tools = new Tools();
        
        String text = "";
        
        if (extention.equals(".txt")) {
            text = tools.readWholeTextFromFile(selectedFile);
            char[] charArray = tools.getCharacterArrayFromText(text);
            int length = charArray.length;
            int[] letterFrequency = tools.getLetterFrequency(charArray);
            
            Arrays.sort(charArray);
            
            length = removeDuplicateCharacterFromArray(charArray, length);
            
            HuffmanNode root = tools.createTree(length, charArray, letterFrequency);
            Map<Character, String> mp = tools.getHuffmanCodePerCharacter(root, "");
            
            String allBits = tools.getHuffmanCodeAllCharacter(text.toCharArray(), mp);
            
            byte[] bin = allBits.getBytes();
            
            file.setSelectedFile(new File("*.cmp"));
            file.showSaveDialog(this);
            File descFile = file.getSelectedFile();
            String saveDescPath = descFile.getPath();
            tools.writeCmpFile(saveDescPath, letterFrequency, bin);
            
        } else if (extention.equals(".cmp")) {
            String treeDataFromCmpFile = tools.readTreeFromCmpFile(selectedFilePath);
            char[] characterArrayLetterFromCmpFile = tools.getTreeLetter(treeDataFromCmpFile);
            int[] characterArrayLetterFrequencyFromCmpFile = tools.getTreeLetterFrequency(treeDataFromCmpFile);
            HuffmanNode root = tools.createTreeFromCmpFileData(characterArrayLetterFromCmpFile.length, characterArrayLetterFromCmpFile, characterArrayLetterFrequencyFromCmpFile);
            byte[] bb = tools.readHuffmanCodeFromCmpFile(selectedFilePath);
            String myS = new String(bb,Charset.forName("UTF-8"));
            String origanalString = tools.decode(myS, root);
            
            file.setSelectedFile(new File("*.txt"));
            file.showSaveDialog(this);
            File descFile = file.getSelectedFile();
            String saveDescPath = descFile.getPath();
            tools.writeTextFile(saveDescPath, origanalString);
            
        }
        

    }//GEN-LAST:event_btnChoseFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChoseFile;
    // End of variables declaration//GEN-END:variables
}
